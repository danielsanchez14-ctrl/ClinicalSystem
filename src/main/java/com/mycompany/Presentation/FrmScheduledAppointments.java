/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package com.mycompany.Presentation;

import com.mycompany.Models.AppointmentStatus;
import com.mycompany.Models.Consultation;
import com.mycompany.Models.Patient;
import com.mycompany.Services.AppointmentService;
import javax.swing.JOptionPane;

/**
 *
 * @author mateo
 */
public class FrmScheduledAppointments extends javax.swing.JInternalFrame {

    private final AppointmentService appointmentService;
    private final Patient patient;

    /**
     * Creates new form FrmScheduledAppointments
     *
     * @param appointmentService
     * @param patient
     */
    public FrmScheduledAppointments(AppointmentService appointmentService, Patient patient) {
        initComponents();
        this.appointmentService = appointmentService;
        this.patient = patient;
        loadPatientAppointments();

        addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
            @Override
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent e) {
                loadPatientAppointments(); // Recargar datos cada vez que se activa
            }
        });
    }

    private void loadPatientAppointments() {
        // Traer las citas del paciente (citas programadas)
        var appointments = appointmentService.getAppointmentsByPatient(patient.getId(), AppointmentStatus.PROGRAMADA);

        // Modelo de la tabla
        javax.swing.table.DefaultTableModel model = new javax.swing.table.DefaultTableModel(
                new Object[]{"Doctor", "Date", "Select"}, 0
        ) {
            @Override
            public Class<?> getColumnClass(int columnIndex) {
                return (columnIndex == 2) ? Boolean.class : String.class;
            }

            @Override
            public boolean isCellEditable(int row, int column) {
                return column == 2;
            }
        };

        if (appointments != null && !appointments.isEmpty()) {
            for (var a : appointments) {
                model.addRow(new Object[]{
                    a.getDoctor().getFullName(),
                    a.getScheduledAtAsString(),
                    Boolean.FALSE
                });
            }
        } else {
            System.out.println("No hay citas programadas para mostrar");
        }

        tblSchedule.setModel(model);
        model.addTableModelListener(e -> {
            if (e.getColumn() == 2) {
                enforceSingleSelection(model, e.getFirstRow(), e.getColumn());
            }
        });

        // Permitir scroll horizontal si el texto es muy largo
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        tblSchedule.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);

        // Ajustar anchos iniciales de columnas (se pueden ajustar al gusto)
        tblSchedule.getColumnModel().getColumn(0).setPreferredWidth(240); // Doctor
        tblSchedule.getColumnModel().getColumn(1).setPreferredWidth(238); // Date

        // Tooltip para mostrar texto completo al pasar el mouse
        tblSchedule.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            @Override
            public void mouseMoved(java.awt.event.MouseEvent e) {
                int row = tblSchedule.rowAtPoint(e.getPoint());
                int col = tblSchedule.columnAtPoint(e.getPoint());
                if (row > -1 && col > -1) {
                    Object value = tblSchedule.getValueAt(row, col);
                    if (value != null) {
                        tblSchedule.setToolTipText(value.toString());
                    } else {
                        tblSchedule.setToolTipText(null);
                    }
                }
            }
        });
    }

    private void enforceSingleSelection(javax.swing.table.DefaultTableModel model, int row, int column) {
        if (column == 2 && Boolean.TRUE.equals(model.getValueAt(row, column))) {
            for (int i = 0; i < model.getRowCount(); i++) {
                if (i != row) {
                    model.setValueAt(false, i, 2); //
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSchedule = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();
        btnCancelAppointment = new javax.swing.JButton();
        upperPanel = new javax.swing.JPanel();

        setPreferredSize(new java.awt.Dimension(700, 400));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Scheduled appointments");

        tblSchedule.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        tblSchedule.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Doctor", "Date and hour", "Select"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSchedule.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tblSchedule.setRowHeight(40);
        tblSchedule.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblSchedule.setShowGrid(true);
        jScrollPane1.setViewportView(tblSchedule);

        btnBack.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        btnBack.setText("Back");
        btnBack.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnBackMouseClicked(evt);
            }
        });

        btnCancelAppointment.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        btnCancelAppointment.setText("Cancel selected");
        btnCancelAppointment.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCancelAppointmentMouseClicked(evt);
            }
        });

        upperPanel.setBackground(new java.awt.Color(102, 102, 255));
        upperPanel.setPreferredSize(new java.awt.Dimension(800, 50));

        javax.swing.GroupLayout upperPanelLayout = new javax.swing.GroupLayout(upperPanel);
        upperPanel.setLayout(upperPanelLayout);
        upperPanelLayout.setHorizontalGroup(
            upperPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        upperPanelLayout.setVerticalGroup(
            upperPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnCancelAppointment)
                .addGap(18, 18, 18)
                .addComponent(btnBack)
                .addGap(29, 29, 29))
            .addComponent(upperPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(198, 198, 198)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 556, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(74, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(upperPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBackMouseClicked
        this.dispose();
    }//GEN-LAST:event_btnBackMouseClicked

    private void btnCancelAppointmentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCancelAppointmentMouseClicked
        //Verificar si hay una cita seleccionada
        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) tblSchedule.getModel();

        int selectedRow = -1;
        for (int i = 0; i < model.getRowCount(); i++) {
            Boolean isSelected = (Boolean) model.getValueAt(i, 2); // Columna "Select"
            if (isSelected != null && isSelected) {
                selectedRow = i;
                break;
            }
        }
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this,
                    "Please select an appointment to cancel",
                    "No Selection",
                    JOptionPane.WARNING_MESSAGE);
            return; // Salir del método
        }
        // ✅ PASO 3: Confirmar la cancelación
        String doctorName = (String) model.getValueAt(selectedRow, 0);
        String dateTime = (String) model.getValueAt(selectedRow, 1);

        int option = JOptionPane.showConfirmDialog(
                this,
                "Are you sure you want to cancel this appointment?\n\n"
                + "Doctor: " + doctorName + "\n"
                + "Date: " + dateTime,
                "Confirm Cancellation",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE
        );

        if (option == JOptionPane.YES_OPTION) {
            try {
                //Obtener la cita correspondiente
                var appointments = appointmentService.getAppointmentsByPatient(
                        patient.getId(),
                        AppointmentStatus.PROGRAMADA
                );

                if (appointments != null && selectedRow < appointments.size()) {
                    var appointmentToCancel = appointments.get(selectedRow);

                    System.out.println("Cancelando cita ID: " + appointmentToCancel.getId());

                    //Cancelar la cita usando el servicio
                    boolean success = appointmentService.updateAppointmentStatus(appointmentToCancel.getId(), AppointmentStatus.CANCELADA);

                    if (success) {
                        JOptionPane.showMessageDialog(this,
                                "Appointment cancelled successfully!",
                                "Success",
                                JOptionPane.INFORMATION_MESSAGE);

                        //Recargar la tabla
                        loadPatientAppointments();
                    } else {
                        JOptionPane.showMessageDialog(this,
                                "Failed to cancel appointment. Please try again.",
                                "Error",
                                JOptionPane.ERROR_MESSAGE);
                    }
                }
            } catch (Exception e) {
                System.err.println("Error al cancelar cita: " + e.getMessage());
                e.printStackTrace();
                JOptionPane.showMessageDialog(this,
                        "Error cancelling appointment: " + e.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        } else {
            System.out.println("Cancelación abortada por el usuario");
        }
    }//GEN-LAST:event_btnCancelAppointmentMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCancelAppointment;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblSchedule;
    private javax.swing.JPanel upperPanel;
    // End of variables declaration//GEN-END:variables
}
