/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package com.mycompany.Presentation;

import com.mycompany.Models.Appointment;
import com.mycompany.Models.AppointmentStatus;
import com.mycompany.Models.Doctor;
import com.mycompany.Models.Patient;
import com.mycompany.Models.User;
import com.mycompany.Services.AppointmentService;
import com.mycompany.Services.AuthenticationService;
import com.mycompany.Services.DoctorService;
import com.mycompany.Services.PatientService;
import java.time.Duration;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author mateo
 */
public class FrmNewAppointment extends javax.swing.JInternalFrame {

    private final AppointmentService appointmentService; 
    private final DoctorService doctorService;
    private final Patient patient;
    
    private List<Doctor> doctorsList;
    
    /**
     * Creates new form FrmNewAppointment
     * @param appointmentService
     * @param doctorService
     * @param patientService
     * @param patient
     */
    public FrmNewAppointment(AppointmentService appointmentService, DoctorService doctorService, PatientService patientService, Patient patient) {
        initComponents();
        this.appointmentService = appointmentService;
        this.doctorService = doctorService;
        this.patient = patient;
        
        loadAllDoctors();
    }
    
    private void loadAllDoctors(){
        //Limpiar el ComboBox
        cmbDoctorsAvailable.removeAllItems();
        
        //Obtener todos los doctores
        doctorsList = doctorService.listAllDoctors();
        
        if (doctorsList == null || doctorsList.isEmpty()){
            cmbDoctorsAvailable.addItem("No doctors available");
        } else {
            //Agregar cada doctor al ComboBox
            for (Doctor doctor: doctorsList){
                String displayText = doctor.getFullName() + " - " + doctor.getMedicalSpecialty().getSpecialtyName();
                cmbDoctorsAvailable.addItem(displayText);
            }
        }
    }
    
    private boolean isDoctorAvailable(Doctor doctor, LocalDateTime dateTime) {
        // Obtener todas las citas del doctor
        List<Appointment> doctorAppointments = this.appointmentService.getAppointmentsByDoctor(doctor.getId(), AppointmentStatus.PROGRAMADA);

        if (doctorAppointments == null || doctorAppointments.isEmpty()) {
            return true; // Doctor disponible si no tiene citas
        }

        // Verificar si el doctor tiene una cita en la fecha y hora seleccionadas
        for (Appointment appointment : doctorAppointments) {
            LocalDateTime appointmentDateTime = appointment.getScheduledAt();

            // Si coincide la fecha y hora exacta, el doctor NO está disponible
            if (appointmentDateTime.equals(dateTime)) {
                return false;
            }

            // También verificar si hay conflicto considerando la duración
            LocalDateTime appointmentEnd = appointmentDateTime.plus(appointment.getDuration());
            LocalDateTime newAppointmentEnd = dateTime.plus(Duration.ofHours(1));
            
            if (appointmentEnd == null){
                return false;
            }
            
            // Verificar si hay solapamiento de horarios
            if ((dateTime.isBefore(appointmentEnd) && dateTime.isAfter(appointmentDateTime)) ||
                (newAppointmentEnd.isAfter(appointmentDateTime) && newAppointmentEnd.isBefore(appointmentEnd)) ||
                (dateTime.isBefore(appointmentDateTime) && newAppointmentEnd.isAfter(appointmentEnd))) {
                return false;
            }
            
        }
    
        return true; // Doctor disponible
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnDateChooser = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cmbDoctorsAvailable = new javax.swing.JComboBox<>();
        btnHourSelection = new com.github.lgooddatepicker.components.TimePicker();
        upperPanel2 = new javax.swing.JPanel();
        btnBack = new javax.swing.JButton();
        btnScheduleAppointment = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(700, 400));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setPreferredSize(new java.awt.Dimension(700, 400));

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Schedule a new appointment");

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Hour");

        btnDateChooser.setBackground(new java.awt.Color(255, 255, 255));

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Doctors available");

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Date");

        cmbDoctorsAvailable.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbDoctorsAvailable.setBackground(new java.awt.Color(255, 255, 255));

        upperPanel2.setBackground(new java.awt.Color(102, 102, 255));
        upperPanel2.setPreferredSize(new java.awt.Dimension(800, 50));

        javax.swing.GroupLayout upperPanel2Layout = new javax.swing.GroupLayout(upperPanel2);
        upperPanel2.setLayout(upperPanel2Layout);
        upperPanel2Layout.setHorizontalGroup(
            upperPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        upperPanel2Layout.setVerticalGroup(
            upperPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );

        btnBack.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        btnBack.setText("Back");
        btnBack.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnBackMouseClicked(evt);
            }
        });
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnScheduleAppointment.setText("Schedule");
        btnScheduleAppointment.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        btnScheduleAppointment.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnScheduleAppointmentMouseClicked(evt);
            }
        });
        btnScheduleAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnScheduleAppointmentActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(upperPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 688, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(102, 102, 102)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(cmbDoctorsAvailable, javax.swing.GroupLayout.PREFERRED_SIZE, 477, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(77, 77, 77)
                                .addComponent(jLabel1)))
                        .addContainerGap())
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(65, 65, 65)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(btnHourSelection, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                                .addGap(109, 109, 109))))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnScheduleAppointment)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnBack)
                .addGap(34, 34, 34))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(upperPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(35, 35, 35)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2))
                .addGap(3, 3, 3)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnHourSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbDoctorsAvailable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnScheduleAppointment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnBack, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE))
                .addGap(28, 28, 28))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 688, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBackMouseClicked
        this.dispose();
    }//GEN-LAST:event_btnBackMouseClicked

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnScheduleAppointmentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnScheduleAppointmentMouseClicked
        var date = btnDateChooser.getDate(); //Retorna un objeto Date
        var hour = btnHourSelection.getTime(); //Retorna un objeto LocalTime
        
        //Verificar fecha
        if (date == null) {
            JOptionPane.showMessageDialog(this, "Please select a date", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        //Verificar hora
        if (hour == null) {
            JOptionPane.showMessageDialog(this, "Please select an hour", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        var doctorSelected = cmbDoctorsAvailable.getSelectedItem();
        //Obtener el índice seleccionado en lugar del item
        int selectedIndex = cmbDoctorsAvailable.getSelectedIndex();
        Duration duration = Duration.ofHours(1);

        //Verificar paciente
        if (patient == null) {
            JOptionPane.showMessageDialog(this, "Patient not found. Please log in again.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        Doctor doctor = null;
        if (selectedIndex >= 0 && selectedIndex < doctorsList.size()) {
            doctor = doctorsList.get(selectedIndex);
        }
        
        //Verificar doctor
        if (doctor == null) {
            JOptionPane.showMessageDialog(this, "Please select a doctor", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
            
        // Convertir Date a LocalDateTime
        Instant instant = date.toInstant();
        ZoneId zone = ZoneId.systemDefault();
        LocalDate localDate = instant.atZone(zone).toLocalDate();
        LocalDateTime dateTimeFinal = LocalDateTime.of(localDate, hour);
        
        if (dateTimeFinal.isBefore(LocalDateTime.now())){
            JOptionPane.showMessageDialog(this, "Invalid date", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        System.out.println("=== DEBUG INFO ===");
        System.out.println("Fecha y hora seleccionada: " + dateTimeFinal);
        System.out.println("Doctor seleccionado: " + doctor.getFullName() + " (ID: " + doctor.getId() + ")");
        System.out.println("Paciente: " + patient.getFullName() + " (ID: " + patient.getId() + ")");
        System.out.println("Duración: " + duration);
        
        if (!isDoctorAvailable(doctor, dateTimeFinal)) {
            JOptionPane.showMessageDialog(this, 
                "Sorry, Dr. " + doctor.getFullName() + " is not available at that date and time.\n" +
                "Please select a different doctor or time slot.", 
                "Doctor Not Available", 
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // Una vez validado todo, se llama al servicio de citas:
        try {
            Appointment newAppointment = new Appointment(dateTimeFinal, duration, patient, doctor);
            newAppointment.setStatus(AppointmentStatus.PROGRAMADA);
            System.out.println("Creando cita: " + newAppointment);

            boolean success = this.appointmentService.scheduleAppointment(newAppointment);

            System.out.println("Resultado del servicio scheduleAppointment: " + success);

            if (success) {
                JOptionPane.showMessageDialog(this, 
                    "Appointment Scheduled Successfully!\n\n" +
                    "Doctor: " + doctor.getFullName() + "\n" +
                    "Date: " + dateTimeFinal.toLocalDate() + "\n" +
                    "Time: " + dateTimeFinal.toLocalTime(),
                    "Success", 
                    JOptionPane.INFORMATION_MESSAGE);
                this.dispose();
            } else {
                JOptionPane.showMessageDialog(this, 
                    "Appointment Schedule Failed!\n" +
                    "The service returned false. Please check the logs.",
                    "ERROR", 
                    JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            System.err.println("=== ERROR AL AGENDAR ===");
            System.err.println("Mensaje: " + e.getMessage());
            e.printStackTrace();

            JOptionPane.showMessageDialog(this, 
                "Error scheduling appointment:\n" + e.getMessage(),
                "ERROR", 
                JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnScheduleAppointmentMouseClicked

    private void btnScheduleAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnScheduleAppointmentActionPerformed
        
    }//GEN-LAST:event_btnScheduleAppointmentActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private com.toedter.calendar.JDateChooser btnDateChooser;
    private com.github.lgooddatepicker.components.TimePicker btnHourSelection;
    private javax.swing.JButton btnScheduleAppointment;
    private javax.swing.JComboBox<String> cmbDoctorsAvailable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel upperPanel2;
    // End of variables declaration//GEN-END:variables
}
